
buildscript {

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'gradle.plugin.aspectj:gradle-aspectj:0.1.6'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
    }
}

allprojects {
    apply plugin: 'io.spring.dependency-management'

    ext {

        // Dependencies versions
        aspectjVersion = '1.8.12'
        handlebarsVersion = '4.0.6'
        guiceVersion = '4.1.0'
        jerseyMediaVersion = '2.6'
        jerseyServletVersion = '2.6'
        jerseyJaxrsJsonVersion = '2.4.1'
        jerseyConnectorsVersion = '2.20'
        slf4jVersion = '1.7.21'
        slf4jLayout = 'b657ab3466'

        // Tests dependencies versions
        junitVersion = '4.12'
        junit4DataProviderVersion = '2.0'
        mockitoVersion = '1.9.5'
    }
}

subprojects {
    version null

    apply plugin: 'aspectj.gradle'
    apply plugin: 'java'
    apply plugin: 'idea'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url 'http://download.eclipse.org/rt/eclipselink/maven.repo' }
        maven { url 'https://jitpack.io' }
    }

    // Common dependencies.
    dependencies {

        if (project.name != 'common') {
            compile project(':common')
        }

        compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
        compile "com.github.szhem:log4j-json-layout:${slf4jLayout}"
        compile 'com.diffplug.gradle.spotless:spotless:2.4.1'
        compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyMediaVersion}"
        compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyServletVersion}"
        compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jerseyJaxrsJsonVersion}"
        compile "com.google.code.gson:gson:2.8.2"
        compile "org.twitter4j:twitter4j-stream:4.0.4"
        compile 'com.amazonaws:aws-lambda-java-log4j:1.0.0'

        testCompile "com.tngtech.junit.dataprovider:junit4-dataprovider:${junit4DataProviderVersion}"
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.mockito:mockito-all:${mockitoVersion}"
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task buildZip(type: Zip) {
        from compileJava
        from processResources
        into('lib') {
            from configurations.runtime
        }
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        systemProperties = (Map<String, String>) System.getProperties().findAll { it.key.startsWith("test.") }
    }

    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'Gradle Jar File Example',
                    'Implementation-Version': 1.0,
                    'Main-Class': 'twitter.classification.queuereader.application.QueueReaderApplication'
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
        with jar
    }

    task showAllDependencies(type: DependencyReportTask) {}

    build.dependsOn buildZip
    if (project.name == 'queue-reader') {
        build.dependsOn fatJar
    }
}
